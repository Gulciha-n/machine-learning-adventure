# -*- coding: utf-8 -*-
"""random_forests_regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DA38huc0VU3rCGJT7xOGaceIa06Qsncd
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
import warnings
warnings.filterwarnings("ignore")

df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/ml/Hitters.csv")
df.dropna(inplace=True)

dms = pd.get_dummies(df[['League', 'Division', 'NewLeague']])
y = df["Salary"]
X_ = df.drop(['Salary', 'League', 'Division', 'NewLeague'], axis=1).astype('float64')
X = pd.concat([X_, dms[['League_N', 'Division_W', 'NewLeague_N']]], axis=1)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

rf_model = RandomForestRegressor(random_state=42).fit(X_train, y_train)

rf_model.get_params()
# n_estimators : number of tree

y_pred = rf_model.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
rmse

"""**Model Tuning**"""

rf_params = {"max_depth": [5,8,10],
             "max_features": [1,2,5,10],
             "n_estimators": [200,500,1000,2000],
             "min_samples_split": [2,5,10]}

rf_cv_model = GridSearchCV(rf_model, rf_params, cv=10, n_jobs=-1, verbose=2).fit(X_train, y_train)

rf_cv_model.best_params_

"""**Tuned Model**"""

rf_tuned = RandomForestRegressor(max_depth=8,
                                 max_features=2,
                                 min_samples_split=2,
                                 n_estimators=200).fit(X_train, y_train)

y_pred = rf_tuned.predict(X_test)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
rmse

"""**Hyperparameter significance level**"""

importance = pd.DataFrame({"Importance": rf_tuned.feature_importances_*100,
                          "index": X_train.columns})

importance.sort_values(by="Importance",
                       axis = 0, # by rows
                       ascending=True).plot(x="index", y="Importance", kind="barh", color = "b")

plt.xlabel("Importance")
plt.ylabel("Features")
plt.title("Feature Importances")
plt.show()

"""**Visualization of the First Decision Tree from the Random Forest Model**"""

from ipywidgets import Image
import pydotplus
from sklearn.tree import export_graphviz
from six import StringIO

d_tree0 = rf_tuned.estimators_[0]
dot_data = StringIO()
export_graphviz(d_tree0, feature_names=X_train.columns,
                out_file=dot_data, filled=True, rounded=True)

graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
Image(value=graph.create_png())

